initialise-giving initialise-binding initialise-storing postpone-after-effect multithread scope
  ({"any" |-> values,
    "bool" |-> bools,
    "int" |-> int,
    "int8" |-> int8,
    "int16" |-> int16,
    "int32" |-> int32,
    "int64" |-> int64,
    "uint" |-> uint,
    "uint8" |-> uint8,
    "uint16" |-> uint16,
    "uint32" |-> uint32,
    "uint64" |-> uint64,
    "true" |-> true,
    "false" |-> false,
    "nil" |-> null,
    "print" |-> function closure print
                  (tuple-elements given),
    "make" |-> function closure else
                 (case-match
                    (tuple
                       (type-construct
                          (channels,
                           pattern-bind "type")),
                     channel-create
                       (0)),
                  case-match
                    (tuple
                       (type-construct
                          (channels,
                           pattern-bind "type"),
                        pattern-bind "N"),
                     checked when-true
                       (is-greater-or-equal
                          (bound "N",
                           0),
                        channel-create
                          (bound "N"))))},
   scope
     (collateral
        (bind
           ("main",
            allocate-variable functions
              (tuples
                 ((values)*),
               null-type)),
         map
           ( )),
      sequential
        (assign
           (bound "main",
            function closure scope
              (collateral
                 (match
                    (given,
                     tuple
                       ( )),
                  bind
                    ("c",
                     allocate-variable values),
                  ( )),
               handle-return sequential
                 (give
                    (apply
                       (current-value bound
                          "make",
                        tuple l-to-r
                          (type-construct
                             (channels,
                              current-value bound
                                "int"),
                           decimal-natural "10",
                           ( ))),
                     sequential
                       (check-true and
                          (is-in-type
                             (bound "c",
                              variables),
                           not is-in-type
                             (given,
                              types)),
                        assign
                          (bound "c",
                           given))),
                  scope
                    (collateral
                       (bind
                          ("i",
                           allocate-variable values),
                        ( )),
                     sequential
                       (give
                          (decimal-natural "0",
                           sequential
                             (check-true and
                                (is-in-type
                                   (bound "i",
                                    variables),
                                 not is-in-type
                                   (given,
                                    types)),
                              assign
                                (bound "i",
                                 given))),
                        while
                          (is-less l-to-r
                             (current-value bound
                                "i",
                              decimal-natural "10"),
                           scope
                             (collateral
                                ( ),
                              sequential
                                (sequential
                                   (channel-send-else-wait
                                      (current-value bound
                                         "c",
                                       current-value bound
                                         "i"),
                                    postpone null),
                                 give
                                   (int-add l-to-r
                                      (current-value bound
                                         "i",
                                       decimal-natural "1"),
                                    sequential
                                      (check-true and
                                         (is-in-type
                                            (bound "i",
                                             variables),
                                          not is-in-type
                                            (given,
                                             types)),
                                       assign
                                         (bound "i",
                                          given))),
                                 null-value))),
                        null-value)),
                  scope
                    (collateral
                       (bind
                          ("i",
                           allocate-variable values),
                        ( )),
                     sequential
                       (give
                          (decimal-natural "0",
                           sequential
                             (check-true and
                                (is-in-type
                                   (bound "i",
                                    variables),
                                 not is-in-type
                                   (given,
                                    types)),
                              assign
                                (bound "i",
                                 given))),
                        while
                          (is-less l-to-r
                             (current-value bound
                                "i",
                              decimal-natural "10"),
                           scope
                             (collateral
                                ( ),
                              sequential
                                (apply
                                   (current-value bound
                                      "print",
                                    tuple l-to-r
                                      (after-effect
                                         (channel-receive-else-wait current-value bound
                                            "c",
                                          postpone null),
                                       ( ))),
                                 give
                                   (int-add l-to-r
                                      (current-value bound
                                         "i",
                                       decimal-natural "1"),
                                    sequential
                                      (check-true and
                                         (is-in-type
                                            (bound "i",
                                             variables),
                                          not is-in-type
                                            (given,
                                             types)),
                                       assign
                                         (bound "i",
                                          given))),
                                 null-value))),
                        null-value)),
                  null-value))),
         null-value,
         effect apply
           (current-value bound
              "main",
            tuple
              ( )))))