initialise-giving initialise-binding initialise-storing scope
  ({"any" |-> values,
    "bool" |-> bools,
    "int" |-> int,
    "int8" |-> int8,
    "int16" |-> int16,
    "int32" |-> int32,
    "int64" |-> int64,
    "uint" |-> uint,
    "uint8" |-> uint8,
    "uint16" |-> uint16,
    "uint32" |-> uint32,
    "uint64" |-> uint64,
    "true" |-> true,
    "false" |-> false,
    "nil" |-> null,
    "print" |-> function closure print
                  (tuple-elements given)},
   handle-abrupt
     (sequential
        (scope
           (collateral
              (bind
                 ("main",
                  alloc functions
                    (tuples
                       ((values)*),
                     null-type)),
               map
                 ( )),
            sequential
              (sequential
                 (assign
                    (bound "main",
                     function closure scope
                       (collateral
                          (match
                             (given,
                              tuple
                                ( )),
                           map
                             ( )),
                        handle-return sequential
                          (apply
                             (sequential
                                (check-true not is-in-type
                                   (bound "print",
                                    types),
                                 current-value bound
                                   "print"),
                              tuple
                                (sequential
                                   (check-true not is-in-type
                                      (bound "int",
                                       types),
                                    current-value bound
                                      "int"))),
                           null-value))),
                  null-value),
               apply
                 (assigned bound
                    "main",
                  tuple
                    ( )))),
         0),
      1))