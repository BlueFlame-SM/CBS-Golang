initialise-giving initialise-binding initialise-storing scope
  ({"any" |-> values,
    "bool" |-> bools,
    "int" |-> int,
    "int8" |-> int8,
    "int16" |-> int16,
    "int32" |-> int32,
    "int64" |-> int64,
    "uint" |-> uint,
    "uint8" |-> uint8,
    "uint16" |-> uint16,
    "uint32" |-> uint32,
    "uint64" |-> uint64,
    "true" |-> true,
    "false" |-> false,
    "nil" |-> null,
    "print" |-> function closure print
                  (tuple-elements given)},
   handle-abrupt
     (sequential
        (multithread scope
           (collateral
              (bind
                 ("main",
                  allocate-variable functions
                    (tuples
                       ((values)*),
                     null-type)),
               map
                 ( )),
            sequential
              (assign
                 (bound "main",
                  function closure scope
                    (collateral
                       (match
                          (given,
                           tuple
                             ( )),
                        map
                          ( )),
                     handle-return sequential
                       (apply
                          (current-value bound
                             "print",
                           tuple l-to-r
                             (current-value bound
                                "true")),
                        null-value))),
               null-value,
               effect apply
                 (current-value bound
                    "main",
                  tuple
                    ( )))),
         "succes"),
      "failure"))