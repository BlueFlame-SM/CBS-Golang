initialise-giving initialise-binding initialise-storing finalise-failing scope
  (accumulate
     (bind
        ("any",
         alloc-init
           (types,
            values)),
      bind
        ("bool",
         alloc-init
           (types,
            bools)),
      bind
        ("int",
         alloc-init
           (types,
            int)),
      bind
        ("int8",
         alloc-init
           (types,
            int8)),
      bind
        ("int16",
         alloc-init
           (types,
            int16)),
      bind
        ("int32",
         alloc-init
           (types,
            int32)),
      bind
        ("int64",
         alloc-init
           (types,
            int64)),
      bind
        ("uint",
         alloc-init
           (types,
            uint)),
      bind
        ("uint8",
         alloc-init
           (types,
            uint8)),
      bind
        ("uint16",
         alloc-init
           (types,
            uint16)),
      bind
        ("uint32",
         alloc-init
           (types,
            uint32)),
      bind
        ("uint64",
         alloc-init
           (types,
            uint64)),
      bind
        ("true",
         alloc-init
           (bools,
            true)),
      bind
        ("false",
         alloc-init
           (bools,
            false)),
      bind
        ("nil",
         alloc-init
           (null-type,
            null)),
      bind
        ("print",
         alloc-init
           (functions
              ((values)*,
               null-type),
            function closure print
              (tuple-elements given)))),
   scope
     (collateral
        (bind
           ("main",
            alloc functions
              (tuples
                 ((values)*),
               values)),
         collateral
           (bind
              ("my_print",
               alloc functions
                 (tuples
                    ((values)*),
                  values)),
            map
              ( ))),
      sequential
        (sequential
           (assign
              (bound "main",
               function closure scope
                 (collateral
                    (match
                       (given,
                        tuple
                          ( )),
                     map
                       ( )),
                  handle-return sequential
                    (apply
                       (assigned bound
                          "my_print",
                        tuple
                          (assigned bound
                             "true")),
                     null-value))),
            assign
              (bound "my_print",
               function closure scope
                 (collateral
                    (match
                       (given,
                        tuple
                          (pattern closure bind
                             ("b",
                              alloc-init
                                (values,
                                 given)))),
                     map
                       ( )),
                  handle-return sequential
                    (apply
                       (assigned bound
                          "print",
                        tuple
                          (assigned bound
                             "b")),
                     null-value))),
            null-value),
         apply
           (assigned bound
              "main",
            tuple
              ( )))))