initialise-giving initialise-binding initialise-storing scope
  ({"any" |-> values,
    "bool" |-> bools,
    "int" |-> int,
    "int8" |-> int8,
    "int16" |-> int16,
    "int32" |-> int32,
    "int64" |-> int64,
    "uint" |-> uint,
    "uint8" |-> uint8,
    "uint16" |-> uint16,
    "uint32" |-> uint32,
    "uint64" |-> uint64,
    "true" |-> true,
    "false" |-> false,
    "nil" |-> null,
    "print" |-> function closure print
                  (tuple-elements given)},
   handle-abrupt
     (sequential
        (multithread scope
           (collateral
              (bind
                 ("main",
                  alloc-init
                    (values,
                     function closure scope
                       (collateral
                          (match
                             (given,
                              tuple
                                ( )),
                           map
                             ( )),
                        handle-return sequential
                          (apply
                             (current-value bound
                                "my_print",
                              tuple
                                (current-value bound
                                   "true")),
                           null-value)))),
               collateral
                 (bind
                    ("my_print",
                     alloc-init
                       (values,
                        function closure scope
                          (collateral
                             (match
                                (given,
                                 tuple
                                   (pattern closure bind
                                      ("b",
                                       alloc-init
                                         (sequential
                                            (check-true is-in-type
                                               (bound "bool",
                                                types),
                                             bound "bool"),
                                          given)))),
                              map
                                ( )),
                           handle-return sequential
                             (apply
                                (current-value bound
                                   "print",
                                 tuple
                                   (current-value bound
                                      "b")),
                              null-value)))),
                  map
                    ( ))),
            sequential
              (effect apply
                 (current-value bound
                    "main",
                  tuple
                    ( )))),
         "succes"),
      "failure"))