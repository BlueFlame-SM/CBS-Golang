initialise-giving initialise-binding initialise-storing postpone-after-effect multithread scope
  ({"any" |-> values,
    "bool" |-> booleans,
    "int" |-> integers,
    "uint" |-> natural-numbers,
    "true" |-> true,
    "false" |-> false,
    "nil" |-> null,
    "print" |-> function closure print
                  (tuple-elements given),
    "make" |-> function closure else
                 (case-match
                    (tuple
                       (channels),
                     channel-create
                       (0)),
                  case-match
                    (tuple
                       (channels,
                        pattern-bind "N"),
                     checked when-true
                       (is-greater-or-equal
                          (bound "N",
                           0),
                        channel-create
                          (bound "N"))))},
   scope
     (collateral
        (bind
           ("main",
            allocate-variable functions
              (tuples
                 ((values)*),
               null-type)),
         bind
           ("sum",
            allocate-variable functions
              (tuples
                 ((values)*),
               null-type)),
         ( )),
      sequential
        (initialise-variable
           (bound "main",
            function closure scope
              (collateral
                 (match
                    (given,
                     tuple
                       ( )),
                  ( )),
               handle-return sequential
                 (apply
                    (current-value bound
                       "sum",
                     tuple l-to-r
                       (decimal-natural "1",
                        decimal-natural "2")),
                  null-value))),
         initialise-variable
           (bound "sum",
            function closure scope
              (collateral
                 (match
                    (given,
                     tuple
                       (pattern abstraction bind
                          ("a",
                           alloc-init
                             (values,
                              given)),
                        pattern abstraction bind
                          ("b",
                           alloc-init
                             (values,
                              given)))),
                  ( )),
               handle-return sequential
                 (apply
                    (current-value bound
                       "print",
                     tuple
                       (int-add l-to-r
                          (current-value bound
                             "a",
                           current-value bound
                             "b"))),
                  null-value))),
         null-value,
         effect apply
           (current-value bound
              "main",
            tuple
              ( )))))