initialise-giving initialise-binding initialise-storing scope
  ({"any" |-> values,
    "bool" |-> bools,
    "int" |-> int,
    "int8" |-> int8,
    "int16" |-> int16,
    "int32" |-> int32,
    "int64" |-> int64,
    "uint" |-> uint,
    "uint8" |-> uint8,
    "uint16" |-> uint16,
    "uint32" |-> uint32,
    "uint64" |-> uint64,
    "true" |-> true,
    "false" |-> false,
    "nil" |-> null,
    "print" |-> function closure print
                  (tuple-elements given)},
   handle-abrupt
     (sequential
        (multithread scope
           (collateral
              (bind
                 ("main",
                  allocate-variable functions
                    (tuples
                       ((values)*),
                     null-type)),
               bind
                 ("thread",
                  allocate-variable functions
                    (tuples
                       ((values)*),
                     null-type)),
               map
                 ( )),
            sequential
              (assign
                 (bound "main",
                  function closure scope
                    (collateral
                       (match
                          (given,
                           tuple
                             ( )),
                        map
                          ( )),
                     handle-return sequential
                       (thread-detach thread-activate thread-joinable supply
                          (current-value bound
                             "thread",
                           tuple
                             ( )),
                        scope
                          (collateral
                             (bind
                                ("i",
                                 allocate-variable values),
                              map
                                ( )),
                           sequential
                             (give
                                (decimal-natural "5",
                                 sequential
                                   (check-true and
                                      (is-in-type
                                         (bound "i",
                                          variables),
                                       not is-in-type
                                         (given,
                                          types)),
                                    assign
                                      (bound "i",
                                       given))),
                              while
                                (is-less l-to-r
                                   (current-value bound
                                      "i",
                                    decimal-natural "10"),
                                 scope
                                   (collateral
                                      (map
                                         ( )),
                                    sequential
                                      (apply
                                         (current-value bound
                                            "print",
                                          tuple l-to-r
                                            (current-value bound
                                               "i")),
                                       give
                                         (int-add l-to-r
                                            (current-value bound
                                               "i",
                                             decimal-natural "1"),
                                          sequential
                                            (check-true and
                                               (is-in-type
                                                  (bound "i",
                                                   variables),
                                                not is-in-type
                                                  (given,
                                                   types)),
                                             assign
                                               (bound "i",
                                                given))),
                                       null-value))),
                              null-value)),
                        null-value))),
               assign
                 (bound "thread",
                  function closure scope
                    (collateral
                       (match
                          (given,
                           tuple
                             ( )),
                        map
                          ( )),
                     handle-return sequential
                       (scope
                          (collateral
                             (bind
                                ("i",
                                 allocate-variable values),
                              map
                                ( )),
                           sequential
                             (give
                                (decimal-natural "0",
                                 sequential
                                   (check-true and
                                      (is-in-type
                                         (bound "i",
                                          variables),
                                       not is-in-type
                                         (given,
                                          types)),
                                    assign
                                      (bound "i",
                                       given))),
                              while
                                (is-less l-to-r
                                   (current-value bound
                                      "i",
                                    decimal-natural "5"),
                                 scope
                                   (collateral
                                      (map
                                         ( )),
                                    sequential
                                      (apply
                                         (current-value bound
                                            "print",
                                          tuple l-to-r
                                            (current-value bound
                                               "i")),
                                       give
                                         (int-add l-to-r
                                            (current-value bound
                                               "i",
                                             decimal-natural "1"),
                                          sequential
                                            (check-true and
                                               (is-in-type
                                                  (bound "i",
                                                   variables),
                                                not is-in-type
                                                  (given,
                                                   types)),
                                             assign
                                               (bound "i",
                                                given))),
                                       null-value))),
                              null-value)),
                        null-value))),
               null-value,
               effect apply
                 (current-value bound
                    "main",
                  tuple
                    ( )))),
         "succes"),
      "failure"))