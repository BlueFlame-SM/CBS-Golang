Language "Golang"

[
  #1 Lexical
  #2 Types
  #3 Expressions
  #4 Statements
  #5 Declarations
  #A Disambiguation
]

Syntax
  START : start ::= statement

Semantics
  start[[ START:start ]] : =>null-type

Rule
  start[[Statement]]
    = initialise-binding
      initialise-storing
      finalise-failing
      scope(
        {
          // Types:
          "any" |-> alloc-init(types, values),
          "bool" |-> alloc-init(types, bools),
          "int" |-> alloc-init(types, int),
          "int8" |-> alloc-init(types, int8),
          "int16" |-> alloc-init(types, int16),
          "int32" |-> alloc-init(types, int32),
          "int64" |-> alloc-init(types, int64),
          "uint" |-> alloc-init(types, uint),
          "uint8" |-> alloc-init(types, uint8),
          "uint16" |-> alloc-init(types, uint16),
          "uint32" |-> alloc-init(types, uint32),
          "uint64" |-> alloc-init(types, uint64),
          // Constants:
          "true" |-> alloc-init(bools, true),
          "false" |-> alloc-init(bools, false),
          // Zero value:
          "nil" |-> alloc-init(null-type, null)
        },
        execute[[Statement]])
