Language "Golang"

[
  #1 Lexical
  #2 Types
  #3 Expressions
  #4 Statements
  #5 Declarations
  #A Disambiguation
]

Syntax
  START : start ::= statement

Semantics
  start[[START:start]] : =>null-type

Rule
  start[[Statement]]
    = initialise-binding
      initialise-storing
      finalise-failing
      scope(
        accumulate(
          // Types:
          bind("any", alloc-init(types, values)),
          bind("bool", alloc-init(types, bools)),
          bind("int", alloc-init(types, int)),
          bind("int8", alloc-init(types, int8)),
          bind("int16", alloc-init(types, int16)),
          bind("int32", alloc-init(types, int32)),
          bind("int64", alloc-init(types, int64)),
          bind("uint", alloc-init(types, uint)),
          bind("uint8", alloc-init(types, uint8)),
          bind("uint16", alloc-init(types, uint16)),
          bind("uint32", alloc-init(types, uint32)),
          bind("uint64", alloc-init(types, uint64)),
          // Constants:
          bind("true", alloc-init(bools, true)),
          bind("false", alloc-init(bools, false))
          // Zero value:
//          bind("nil", alloc-init(null-type, null))
        ),
        execute[[Statement]])
