Language "Golang"

#5 Declarations

Syntax
  Declaration : declaration
    ::= varDecl
//      | constDecl  // TODO: const
//      | typeDecl  // TODO: types

  TopLevelDecl : topLevelDecl
    ::= declaration
      | functionDecl
//      | methodDecl  // TODO: methods

Semantics
  allocate[[_:topLevelDecl]] : =>environments

Semantics
  initialise[[_:topLevelDecl]] : =>environments


## Constant declarations

//Syntax
//  constDecl ::= 'const' (constSpec | '(' (constSpec ';')* ')')
//  constSpec ::= identifierList (type? '=' expressionList)?
//
//Syntax
//  identifierList ::= identifier (',' identifier)*
//  expressionList ::= expression (',' expression)*


## Variable declarations

Syntax  // TODO: multiple assignment, multiple declares, types
  VarDecl : varDecl ::= 'var' varSpec
            varSpec ::= identifier '=' expression

Rule
  execute[['var' Identifier '=' Expression]]
    = initialise[['var' Identifier '=' Expression]]

Rule
  allocate[['var' Identifier '=' Expression]]
    = bind(id[[Identifier]], allocate-variable values)

Rule
  initialise[['var' Identifier '=' Expression]]
    = assign[[Identifier '=' Expression]]


## Function declarations

Syntax
  FunctionDecl : functionDecl
    ::= 'func' identifier parameters block
      | 'func' identifier parameters type block

Rule
  allocate[['func' Identifier Parameters Block]]
    = bind(id[[Identifier]], allocate-variable functions(tuples(values*), null-type))

Rule
  allocate[['func' Identifier Parameters T Block]]
    = bind(id[[Identifier]], allocate-variable functions(tuples(values*), type[[T]]))

Rule
  initialise[['func' Identifier Parameters '{' StatementSemic* '}']]
    = assign(
        bound id[[Identifier]],
        function closure scope(
          collateral(
            match(given, tuple(bind-parameters[[Parameters]])),
            allocate-statements[[StatementSemic*]]),
          handle-return sequential(execute-statements[[StatementSemic*]])))

Rule
  initialise[['func' Identifier Parameters T '{' StatementSemic* '}']]
    = initialise[['func' Identifier Parameters '{' StatementSemic* '}']]





