Language "Golang"

#2 Types


## Integer Types

Type int8 ~> bounded-ints(int-neg(int-pow(2, 7)), int-add(int-pow(2, 7), -1))
Type int16 ~> bounded-ints(int-neg(int-pow(2, 15)), int-add(int-pow(2, 15), -1))
Type int32 ~> bounded-ints(int-neg(int-pow(2, 31)), int-add(int-pow(2, 31), -1))
Type int64 ~> bounded-ints(int-neg(int-pow(2, 63)), int-add(int-pow(2, 63), -1))
Alias int = int32

Type uint8 ~> bounded-ints(0, int-add(int-pow(2, 8), -1))
Type uint16 ~> bounded-ints(0, int-add(int-pow(2, 16), -1))
Type uint32 ~> bounded-ints(0, int-add(int-pow(2, 32), -1))
Type uint64 ~> bounded-ints(0, int-add(int-pow(2, 64), -1))
Alias uint = uint32


Syntax
  TypeExpr : typeExpr
    ::= '(' typeExpr ')'
//      | arrayType  // TODO: arrays
//      | structType  // TODO: structs
//      | pointerTypegoType  // TODO: pointers
//      | functionType  // TODO: functions
//      | interfaceType  // TODO: interfaces
//      | sliceType  // TODO: slices
//      | mapType  // TODO: maps
      | channelType // TODO: channels
      | identifier  // TODO: typeargs
//      | qualifiedIdent  // TODO: typeargs


//Syntax
//  typeArgs ::= '[' typeList ','? ']'
//  typeList ::= type (',' type)*

Semantics
  type[[TypeExpr:typeExpr]] : =>types
    = type-construct-type(type-construct[[TypeExpr]])

Semantics
  type-construct[[_:typeExpr]] : =>type-constructs

Rule
  type-construct[['(' TypeExpr ')']] = type-construct[[TypeExpr]]

Rule
  type-construct[[Identifier]] = evaluate[[Identifier]]


## Channel Types

Syntax
  channelType ::= 'chan' typeExpr

Rule
  type-construct[['chan' TypeExpr]] = type-construct(channels, type-construct[[TypeExpr]])


## Function Types

Syntax
  FunctionType  : functionType  ::= 'func' signature
  Signature     : signature     ::= parameters result?
  Result        : result        ::= typeExpr  // TODO: add parameters (requires multiple assignment / tuples)
  Parameters    : parameters    ::= '(' (parameterList ','?)? ')'
  ParameterList : parameterList ::= parameterDecl (',' parameterList)?
  ParameterDecl : parameterDecl ::= identifier typeExpr  // TODO: identifierList


### Binding

Semantics
  bind-parameters[[_:parameters]] : =>patterns*

Rule
  bind-parameters[['(' ')']] = ( )

Rule
  bind-parameters[['(' ParameterList ')']] = bind-parameterdecls[[ParameterList]]

Rule
  [['(' ParameterList ',' ')']] : parameters = [['(' ParameterList ')']]

Semantics
  bind-parameterdecls[[_:parameterList]] : =>patterns*

Rule
  bind-parameterdecls[[ParameterDecl]] = bind-parameterdecl[[ParameterDecl]]

Rule
  bind-parameterdecls[[ParameterDecl ',' ParameterList]]
    = bind-parameterdecl[[ParameterDecl]], bind-parameterdecls[[ParameterList]]

Semantics
  bind-parameterdecl[[_:parameterDecl]] : =>patterns

Rule
  bind-parameterdecl[[Identifier TypeExpr]]
    = pattern closure bind(id[[Identifier]], alloc-init(type[[TypeExpr]], given))





