Language "Golang"

#2 Types


## Integer Types

Syntax
  TypeExpr : typeExpr
    ::= '(' typeExpr ')'
//      | arrayType  // TODO: arrays
//      | structType  // TODO: structs
//      | pointerTypegoType  // TODO: pointers
//      | functionType  // TODO: functions
//      | interfaceType  // TODO: interfaces
//      | sliceType  // TODO: slices
//      | mapType  // TODO: maps
      | channelType // TODO: channels
      | identifier  // TODO: typeargs
//      | qualifiedIdent  // TODO: typeargs


//Syntax
//  typeArgs ::= '[' typeList ','? ']'
//  typeList ::= type (',' type)*

Semantics
  type[[TypeExpr:typeExpr]] : =>types
Rule
  type[['(' TypeExpr ')']] = type[[TypeExpr]]
Rule
  type[[Identifier]] = evaluate[[Identifier]]

## Channel Types

Syntax
  channelType ::= 'chan' typeExpr

Rule
  type[['chan' TypeExpr]] = channels


## Function Types

Syntax
  FunctionType  : functionType  ::= 'func' signature
  Signature     : signature     ::= parameters result?
  Result        : result        ::= typeExpr  // TODO: add parameters (requires multiple assignment / tuples)
  Parameters    : parameters    ::= '(' (parameterList ','?)? ')'
  ParameterList : parameterList ::= parameterDecl (',' parameterList)?
  ParameterDecl : parameterDecl ::= identifier typeExpr  // TODO: identifierList


### Binding

Semantics
  bind-parameters[[_:parameters]] : =>patterns*

Rule
  bind-parameters[['(' ')']] = ( )

Rule
  bind-parameters[['(' ParameterList ')']] = bind-parameterdecls[[ParameterList]]

Rule
  [['(' ParameterList ',' ')']] : parameters = [['(' ParameterList ')']]

Semantics
  bind-parameterdecls[[_:parameterList]] : =>patterns*

Rule
  bind-parameterdecls[[ParameterDecl]] = bind-parameterdecl[[ParameterDecl]]

Rule
  bind-parameterdecls[[ParameterDecl ',' ParameterList]]
    = bind-parameterdecl[[ParameterDecl]], bind-parameterdecls[[ParameterList]]

Semantics
  bind-parameterdecl[[_:parameterDecl]] : =>patterns

Rule
  bind-parameterdecl[[Identifier TypeExpr]]
    = pattern abstraction bind(id[[Identifier]], alloc-init(values, given))





