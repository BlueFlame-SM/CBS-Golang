Language "Golang"

#2 Types


## Integer Types

Type int8 ~> bounded-ints(int-neg(int-pow(2, 7)), int-add(int-pow(2, 7), -1))
Type int16 ~> bounded-ints(int-neg(int-pow(2, 15)), int-add(int-pow(2, 15), -1))
Type int32 ~> bounded-ints(int-neg(int-pow(2, 31)), int-add(int-pow(2, 31), -1))
Type int64 ~> bounded-ints(int-neg(int-pow(2, 63)), int-add(int-pow(2, 63), -1))
Alias int = int32

Type uint8 ~> bounded-ints(0, int-add(int-pow(2, 8), -1))
Type uint16 ~> bounded-ints(0, int-add(int-pow(2, 16), -1))
Type uint32 ~> bounded-ints(0, int-add(int-pow(2, 32), -1))
Type uint64 ~> bounded-ints(0, int-add(int-pow(2, 64), -1))
Alias uint = uint32


Syntax
  T : type
    ::= '(' type ')'
//      | arrayType  // TODO: arrays
//      | structType  // TODO: structs
//      | pointerTypegoType  // TODO: pointers
//      | functionType  // TODO: functions
//      | interfaceType  // TODO: interfaces
//      | sliceType  // TODO: slices
//      | mapType  // TODO: maps
      | channelType // TODO: channels
      | identifier  // TODO: typeargs
//      | qualifiedIdent  // TODO: typeargs

//Syntax
//  typeArgs ::= '[' typeList ','? ']'
//  typeList ::= type (',' type)*

Semantics
  type[[_:type]] : =>types

Rule
  type[['(' T ')']] = type[[T]]

Rule
  type[[Identifier]]
    = sequential(
        check-true is-in-type(bound id[[Identifier]], types),
        bound id[[Identifier]])


## Channel Types

Syntax
  channelType ::= 'chan' type

Rule
  type[['chan' T]] = channels(type[[T]])


## Function Types

Syntax
  FunctionType  : functionType  ::= 'func' signature
  Signature     : signature     ::= parameters result?
  Result        : result        ::= type  // TODO: add parameters (requires multiple assignment / tuples)
  Parameters    : parameters    ::= '(' (parameterList ','?)? ')'
  ParameterList : parameterList ::= parameterDecl (',' parameterList)?
  ParameterDecl : parameterDecl ::= identifier type  // TODO: identifierList


### Binding

Semantics
  bind-parameters[[_:parameters]] : =>patterns*

Rule
  bind-parameters[['(' ')']] = ( )

Rule
  bind-parameters[['(' ParameterList ')']] = bind-parameterlist[[ParameterList]]

Rule
  [['(' ParameterList ',' ')']] : parameters = [['(' ParameterList ')']]

Semantics
  bind-parameterlist[[_:parameterList]] : =>patterns*

Rule
  bind-parameterlist[[ParameterDecl]] = bind-parameterdecl[[ParameterDecl]]

Rule
  bind-parameterlist[[ParameterDecl ',' ParameterList]]
    = bind-parameterdecl[[ParameterDecl]], bind-parameterlist[[ParameterList]]

Semantics
  bind-parameterdecl[[_:parameterDecl]] : =>pattern

Rule
  bind-parameterdecl[[Identifier T]]
    = pattern closure bind(id[[Identifier]], alloc-init(type[[T]], given))





