module GO-2-Types

imports
  libstratego-gpp
  signatures/-
  pp/GO-parenthesize
  pp/GO-pp

imports
  cbs-gen/GO-3-Expressions
  cbs-gen/GO-B-Funcons
  cbs-gen/GO-1-Lexemes

// Language "Golang"

rules

// #2 Types
              


// ## Integer Types
                 

to-funcons:
  |[ type[: (:TypeExpr:) :] ]| ->
  |[ type-construct-type (type-construct[: (:TypeExpr:) :]) ]|
to-funcons:
  |[ type-construct[: ((:TypeExpr:)) :] ]| ->
  |[ type-construct[: (:TypeExpr:) :] ]|
to-funcons:
  |[ type-construct[: (:Identifier:) :] ]| ->
  |[ evaluate[: (:Identifier:) :] ]|

// ## Channel Types
                 

to-funcons:
  |[ type-construct[: chan(:TypeExpr:) :] ]| ->
  |[ type-construct (channels, 
             type-construct[: (:TypeExpr:) :]) ]|

// ## Function Types
                 


// ### Binding
                 

to-funcons:
  |[ bind-parameters[: () :] ]| ->
  |[ () ]|
to-funcons:
  |[ bind-parameters[: ((:ParameterList:)) :] ]| ->
  |[ bind-parameterdecls[: (:ParameterList:) :] ]|
to-desugared:
  [: ((:ParameterList:),) :] : parameters ->
  [: ((:ParameterList:)) :] : parameters
to-funcons:
  |[ bind-parameterdecls[: (:ParameterDecl:) :] ]| ->
  |[ bind-parameterdecl[: (:ParameterDecl:) :] ]|
to-funcons:
  |[ bind-parameterdecls[: (:ParameterDecl:),(:ParameterList:) :] ]| ->
  |[ bind-parameterdecl[: (:ParameterDecl:) :], 
     bind-parameterdecls[: (:ParameterList:) :] ]|
to-funcons:
  |[ bind-parameterdecl[: (:Identifier:)(:TypeExpr:) :] ]| ->
  |[ pattern closure bind (id[: (:Identifier:) :], 
                           alloc-init (type[: (:TypeExpr:) :], 
                                   given)) ]|

