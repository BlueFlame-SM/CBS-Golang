module GO-Start

imports
  libstratego-gpp
  signatures/-
  pp/GO-parenthesize
  pp/GO-pp

imports
  cbs-gen/GO-2-Types
  cbs-gen/GO-A-Disambiguation
  cbs-gen/GO-4-Statements
  cbs-gen/GO-3-Expressions
  cbs-gen/GO-B-Funcons
  cbs-gen/GO-1-Lexemes
  cbs-gen/GO-5-Declarations

// Language "Golang"

rules
to-funcons:
  |[ start[: (:SourceFile:) :] ]| ->
  |[ initialise-giving initialise-binding initialise-storing postpone-after-effect multithread scope ({"any" |-> values, 
                                                 "bool" |-> booleans, 
                                                 "int" |-> integers, 
                                                 "uint" |-> natural-numbers, 
                                                 "true" |-> true, 
                                                 "false" |-> false, 
                                                 "nil" |-> null, 
                                                 "print" |-> function closure print to-strings tuple-elements given, 
                                                 "println" |-> function closure print to-strings (intersperse (" ", 
                                                                                                                 tuple-elements given), 
                                                                                                         "\n"), 
                                                 "make" |-> function closure else (case-match (tuple (channels), 
                                                                                                          channel-create (0)), 
                                                                                                  case-match (tuple (channels, 
                                                                                                                  pattern-bind "N"), 
                                                                                                          checked when-true (is-greater-or-equal (bound "N", 
                                                                                                                                 0), 
                                                                                                                         channel-create (bound "N"))))}, 
                                                execute-sourcefile[: (:SourceFile:) :]) ]|
to-funcons:
  |[ execute-sourcefile[: package main;(:TopLevelDeclSemic*:) :] ]| ->
  |[ scope (collateral (allocate-topleveldecls[: (:TopLevelDeclSemic*:) :]), 
             sequential (initialise-topleveldecls[: (:TopLevelDeclSemic*:) :], 
                     effect evaluate[: main() :])) ]|
to-funcons-default:
  |[ execute-sourcefile[: package(:Identifier:);(:TopLevelDeclSemic*:) :] ]| ->
  |[ scope (collateral (allocate-topleveldecls[: (:TopLevelDeclSemic*:) :]), 
             sequential (initialise-topleveldecls[: (:TopLevelDeclSemic*:) :])) ]|
to-funcons:
  |[ allocate-topleveldecls[:  :] ]| ->
  |[ () ]|
to-funcons:
  |[ allocate-topleveldecls[: (:TopLevelDecl:);(:TopLevelDeclSemic*:) :] ]| ->
  |[ allocate[: (:TopLevelDecl:) :], 
     allocate-topleveldecls[: (:TopLevelDeclSemic*:) :] ]|
to-funcons:
  |[ initialise-topleveldecls[:  :] ]| ->
  |[ null-value ]|
to-funcons:
  |[ initialise-topleveldecls[: (:TopLevelDecl:);(:TopLevelDeclSemic*:) :] ]| ->
  |[ initialise[: (:TopLevelDecl:) :], 
     initialise-topleveldecls[: (:TopLevelDeclSemic*:) :] ]|

