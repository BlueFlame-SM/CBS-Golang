module GO-Start

imports
  libstratego-gpp
  signatures/-
  pp/GO-parenthesize
  pp/GO-pp

imports
  cbs-gen/GO-A-Disambiguation
  cbs-gen/GO-3-Expressions
  cbs-gen/GO-1-Lexemes
  cbs-gen/GO-4-Statements
  cbs-gen/GO-5-Declarations
  cbs-gen/GO-2-Types

// Language "Golang"

rules
to-funcons:
  |[ start[: (:SourceFile:) :] ]| ->
  |[ initialise-giving initialise-binding initialise-storing scope ({"any" |-> values, 
                                   "bool" |-> bools, 
                                   "int" |-> int, 
                                   "int8" |-> int8, 
                                   "int16" |-> int16, 
                                   "int32" |-> int32, 
                                   "int64" |-> int64, 
                                   "uint" |-> uint, 
                                   "uint8" |-> uint8, 
                                   "uint16" |-> uint16, 
                                   "uint32" |-> uint32, 
                                   "uint64" |-> uint64, 
                                   "true" |-> true, 
                                   "false" |-> false, 
                                   "nil" |-> null, 
                                   "print" |-> function closure print (tuple-elements given)}, 
                                  handle-abrupt (sequential (multithread execute-sourcefile[: (:SourceFile:) :], 
                                                  "succes"), 
                                          "failure")) ]|
to-funcons:
  |[ execute-sourcefile[: package main;(:TopLevelDeclSemic*:) :] ]| ->
  |[ scope (allocate-topleveldeclsemic[: (:TopLevelDeclSemic*:) :], 
             sequential (initialise-topleveldeclsemic[: (:TopLevelDeclSemic*:) :], 
                     apply (assigned bound "main", 
                             tuple ()))) ]|
to-funcons-default:
  |[ execute-sourcefile[: package(:Identifier:);(:TopLevelDeclSemic*:) :] ]| ->
  |[ scope (allocate-topleveldeclsemic[: (:TopLevelDeclSemic*:) :], 
             initialise-topleveldeclsemic[: (:TopLevelDeclSemic*:) :]) ]|
to-funcons:
  |[ allocate-topleveldeclsemic[:  :] ]| ->
  |[ map () ]|
to-funcons:
  |[ allocate-topleveldeclsemic[: (:TopLevelDecl:);(:TopLevelDeclSemic*:) :] ]| ->
  |[ collateral (allocate-topleveldecl[: (:TopLevelDecl:) :], 
             allocate-topleveldeclsemic[: (:TopLevelDeclSemic*:) :]) ]|
to-funcons:
  |[ initialise-topleveldeclsemic[:  :] ]| ->
  |[ null-value ]|
to-funcons:
  |[ initialise-topleveldeclsemic[: (:TopLevelDecl:);(:TopLevelDeclSemic*:) :] ]| ->
  |[ sequential (initialise-topleveldecl[: (:TopLevelDecl:) :], 
             initialise-topleveldeclsemic[: (:TopLevelDeclSemic*:) :]) ]|

