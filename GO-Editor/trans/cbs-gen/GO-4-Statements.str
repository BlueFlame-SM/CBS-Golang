module GO-4-Statements

imports
  libstratego-gpp
  signatures/-
  pp/GO-parenthesize
  pp/GO-pp

imports
  cbs-gen/GO-1-Lexemes
  cbs-gen/GO-3-Expressions

// Language "Golang"

rules

// #4 Statements
              


// ## Empty statements
                 

to-funcons:
  |[ execute[:  :] ]| ->
  |[ null-value ]|

// ## Blocks
                 

to-funcons:
  |[ execute[: {(:TerminatedStmt*:)} :] ]| ->
  |[ execute-block[: (:TerminatedStmt*:) :] ]|
to-funcons:
  |[ execute-block[:  :] ]| ->
  |[ null-value ]|
to-funcons:
  |[ execute-block[: (:Statement:); :] ]| ->
  |[ execute[: (:Statement:) :] ]|
to-funcons:
  |[ execute-block[: (:Statement:);(:TerminatedStmt+:) :] ]| ->
  |[ sequential (execute[: (:Statement:) :], 
             execute-block[: (:TerminatedStmt+:) :]) ]|

// ## Expression statements
                 


// ## Assignment statements
                 


// ## Declarations
                 


// ### Constant declarations
                 


// ### Variable declarations
                 

to-funcons:
  |[ declare-vars[: var(:Identifier:)=(:Expression:) :] ]| ->
  |[ bind (identifier[: (:Identifier:) :], 
             alloc-init (values, 
                     evaluate[: (:Expression:) :])) ]|

// ### Short variable declarations
                 


// ## If statements
                 


// ## For statements
                 


// ### For statements with for clause
                 


// ## Temporary print statement
                 

to-funcons:
  |[ execute[: print((:Expression:)) :] ]| ->
  |[ print (evaluate[: (:Expression:) :]) ]|

