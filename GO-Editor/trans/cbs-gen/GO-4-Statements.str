module GO-4-Statements

imports
  libstratego-gpp
  signatures/-
  pp/GO-parenthesize
  pp/GO-pp

imports
  cbs-gen/GO-1-Lexemes
  cbs-gen/GO-3-Expressions

// Language "Golang"

rules

// #4 Statements
              


// ## Empty statements
                 

to-funcons:
  |[ execute[:  :] ]| ->
  |[ null-value ]|

// ## Blocks
                 

to-funcons:
  |[ execute[: {(:StatementSC*:)} :] ]| ->
  |[ scope (allocate-stmts[: (:StatementSC*:) :], 
             execute-stmts[: (:StatementSC*:) :]) ]|
to-funcons:
  |[ allocate-stmts[:  :] ]| ->
  |[ map () ]|
to-funcons:
  |[ allocate-stmts[: (:VarDecl:);(:StatementSC*:) :] ]| ->
  |[ collateral (allocate-vars[: (:VarDecl:) :], 
             allocate-stmts[: (:StatementSC*:) :]) ]|
to-funcons-default:
  |[ allocate-stmts[: (:Statement:);(:StatementSC*:) :] ]| ->
  |[ allocate-stmts[: (:StatementSC*:) :] ]|
to-funcons:
  |[ execute-stmts[:  :] ]| ->
  |[ null-value ]|
to-funcons:
  |[ execute-stmts[: (:VarDecl:);(:StatementSC*:) :] ]| ->
  |[ sequential (initialise-vars[: (:VarDecl:) :], 
             execute-stmts[: (:StatementSC*:) :]) ]|
to-funcons-default:
  |[ execute-stmts[: (:Statement:);(:StatementSC*:) :] ]| ->
  |[ sequential (execute[: (:Statement:) :], 
             execute-stmts[: (:StatementSC*:) :]) ]|

// ## Expression statements
                 

to-funcons:
  |[ execute[: (:Expression:) :] ]| ->
  |[ evaluate[: (:Expression:) :] ]|

// ## Assignment statements
                 


// ## Declarations
                 


// ### Constant declarations
                 


// ### Variable declarations
                 

to-funcons:
  |[ allocate-vars[: var(:Identifier:)=(:Expression:) :] ]| ->
  |[ bind (identifier[: (:Identifier:) :], 
             alloc (values)) ]|
to-funcons:
  |[ initialise-vars[: var(:Identifier:)=(:Expression:) :] ]| ->
  |[ assign (bound (identifier[: (:Identifier:) :]), 
             evaluate[: (:Expression:) :]) ]|

// ### Short variable declarations
                 


// ## If statements
                 

to-desugared:
  [: if(:Expression:)(:Block:) :] : ifStmt ->
  [: if(:Expression:)(:Block:)else{} :] : ifStmt
to-funcons:
  |[ execute[: if(:Expression:)(:Block1:)else(:Block2:) :] ]| ->
  |[ if-else (evaluate[: (:Expression:) :], 
             execute[: (:Block1:) :], 
             execute[: (:Block2:) :]) ]|
to-funcons:
  |[ execute[: if(:Expression:)(:Block:)else(:IfStmt:) :] ]| ->
  |[ if-else (evaluate[: (:Expression:) :], 
             execute[: (:Block:) :], 
             execute[: (:IfStmt:) :]) ]|

// ## For statements
                 


// ### For statements with for clause
                 


// ## Temporary print statement
                 

to-funcons:
  |[ execute[: print((:Expression:)) :] ]| ->
  |[ print (evaluate[: (:Expression:) :]) ]|

