module GO-4-Statements

imports
  libstratego-gpp
  signatures/-
  pp/GO-parenthesize
  pp/GO-pp

imports
  cbs-gen/GO-5-Declarations
  cbs-gen/GO-1-Lexemes
  cbs-gen/GO-3-Expressions

// Language "Golang"

rules

// #4 Statements
              


// ## GO statement
                 

to-funcons:
  |[ execute[: go(:PrimaryExpr:)(:Arguments:) :] ]| ->
  |[ thread-detach thread-activate thread-joinable supply (evaluate[: (:PrimaryExpr:) :], 
                                  tuple-arguments[: (:Arguments:) :]) ]|

// ## Return statement
                 

to-funcons:
  |[ execute[: return :] ]| ->
  |[ return null ]|
to-funcons:
  |[ execute[: return(:Expression:) :] ]| ->
  |[ return evaluate[: (:Expression:) :] ]|

// ## Blocks
                 

to-funcons:
  |[ execute[: {(:StatementSemic*:)} :] ]| ->
  |[ scope (collateral (allocate-statements[: (:StatementSemic*:) :]), 
             sequential (execute-statements[: (:StatementSemic*:) :])) ]|
to-funcons:
  |[ allocate-statements[:  :] ]| ->
  |[ map () ]|
to-funcons:
  |[ allocate-statements[: (:VarDecl:);(:StatementSemic*:) :] ]| ->
  |[ allocate[: (:VarDecl:) :], 
     allocate-statements[: (:StatementSemic*:) :] ]|
to-funcons-default:
  |[ allocate-statements[: (:Statement:);(:StatementSemic*:) :] ]| ->
  |[ allocate-statements[: (:StatementSemic*:) :] ]|
to-funcons:
  |[ execute-statements[:  :] ]| ->
  |[ null-value ]|
to-funcons:
  |[ execute-statements[: (:Statement:);(:StatementSemic*:) :] ]| ->
  |[ execute[: (:Statement:) :], 
     execute-statements[: (:StatementSemic*:) :] ]|

// ## If statements
                 

to-desugared:
  [: if(:Expression:)(:Block:) :] : ifStmt ->
  [: if(:Expression:)(:Block:)else{} :] : ifStmt
to-funcons:
  |[ execute[: if(:Expression:)(:Block1:)else(:Block2:) :] ]| ->
  |[ if-else (evaluate[: (:Expression:) :], 
             execute[: (:Block1:) :], 
             execute[: (:Block2:) :]) ]|
to-funcons:
  |[ execute[: if(:Expression:)(:Block:)else(:IfStmt:) :] ]| ->
  |[ if-else (evaluate[: (:Expression:) :], 
             execute[: (:Block:) :], 
             execute[: (:IfStmt:) :]) ]|
to-desugared:
  [: if(:SimpleStmt:);(:Expression:)(:Block:) :] : statement ->
  [: {(:SimpleStmt:);if(:Expression:)(:Block:);} :] : statement
to-desugared:
  [: if(:SimpleStmt:);(:Expression:)(:Block1:)else(:Block2:) :] : statement ->
  [: {(:SimpleStmt:);if(:Expression:)(:Block1:)else(:Block2:);} :] : statement
to-desugared:
  [: if(:SimpleStmt:);(:Expression:)(:Block:)else(:IfStmt:) :] : statement ->
  [: {(:SimpleStmt:);if(:Expression:)(:Block:)else(:IfStmt:);} :] : statement

// ## For statements
                 

to-funcons:
  |[ execute[: for(:Block:) :] ]| ->
  |[ while (true, 
             execute[: (:Block:) :]) ]|
to-funcons:
  |[ execute[: for(:Expression:)(:Block:) :] ]| ->
  |[ while (evaluate[: (:Expression:) :], 
             execute[: (:Block:) :]) ]|
to-desugared:
  [: for(:SimpleStmt1:);(:Expression:);(:SimpleStmt2:){(:StatementSemic*:)} :] : statement ->
  [: {(:SimpleStmt1:);for(:Expression:){(:StatementSemic*:)(:SimpleStmt2:);};} :] : statement
to-desugared:
  [: for(:SimpleStmt1:);;(:SimpleStmt2:){(:StatementSemic*:)} :] : statement ->
  [: {(:SimpleStmt1:);for{(:StatementSemic*:)(:SimpleStmt2:);};} :] : statement

// ## Simple Statements
                 


// ### Empty statements
                 

to-funcons:
  |[ execute[:  :] ]| ->
  |[ null-value ]|

// ### Expression statements
                 

to-funcons:
  |[ execute[: (:Expression:) :] ]| ->
  |[ evaluate[: (:Expression:) :] ]|

// ### IncDec statements
                 

to-desugared:
  [: (:Identifier:)++ :] : statement ->
  [: (:Identifier:)+=1 :] : statement
to-desugared:
  [: (:Identifier:)-- :] : statement ->
  [: (:Identifier:)-=1 :] : statement

// ### Assignment statements
                 

to-funcons:
  |[ execute[: (:Assignment:) :] ]| ->
  |[ assign[: (:Assignment:) :] ]|
to-funcons:
  |[ assign[: (:Identifier:)=(:Expression:) :] ]| ->
  |[ give (evaluate[: (:Expression:) :], 
             sequential (check-true and (is-in-type (bound id[: (:Identifier:) :], 
                                            variables), 
                                    not is-in-type (given, 
                                                   types)), 
                     assign (bound id[: (:Identifier:) :], 
                             given))) ]|
to-desugared:
  [: (:Identifier:)+=(:Expression:) :] : assignment ->
  [: (:Identifier:)=(:Identifier:)+((:Expression:)) :] : assignment
to-desugared:
  [: (:Identifier:)-=(:Expression:) :] : assignment ->
  [: (:Identifier:)=(:Identifier:)-((:Expression:)) :] : assignment
to-desugared:
  [: (:Identifier:)*=(:Expression:) :] : assignment ->
  [: (:Identifier:)=(:Identifier:)*((:Expression:)) :] : assignment
to-desugared:
  [: (:Identifier:)/=(:Expression:) :] : assignment ->
  [: (:Identifier:)=(:Identifier:)/((:Expression:)) :] : assignment
to-desugared:
  [: (:Identifier:)%=(:Expression:) :] : assignment ->
  [: (:Identifier:)=(:Identifier:)%((:Expression:)) :] : assignment

// ### Short variable declarations
                 

to-desugared:
  [: (:Identifier:):=(:Expression:) :] : statement ->
  [: var(:Identifier:)=(:Expression:) :] : statement

