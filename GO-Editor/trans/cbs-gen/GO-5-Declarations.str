module GO-5-Declarations

imports
  libstratego-gpp
  signatures/-
  pp/GO-parenthesize
  pp/GO-pp

imports
  cbs-gen/GO-2-Types
  cbs-gen/GO-4-Statements
  cbs-gen/GO-3-Expressions
  cbs-gen/GO-1-Lexemes

// Language "Golang"

rules

// #5 Declarations
              


// ## Constant declarations
                 


// ## Variable declarations
                 

to-funcons:
  |[ execute[: var(:Identifier:)=(:Expression:) :] ]| ->
  |[ initialise[: var(:Identifier:)=(:Expression:) :] ]|
to-funcons:
  |[ allocate[: var(:Identifier:)=(:Expression:) :] ]| ->
  |[ bind (id[: (:Identifier:) :], 
             allocate-variable values) ]|
to-funcons:
  |[ initialise[: var(:Identifier:)=(:Expression:) :] ]| ->
  |[ initialise-variable (bound id[: (:Identifier:) :], 
             evaluate[: (:Expression:) :]) ]|

// ## Function declarations
                 

to-funcons:
  |[ allocate[: func(:Identifier:)(:Parameters:)(:Block:) :] ]| ->
  |[ bind (id[: (:Identifier:) :], 
             allocate-variable functions (tuples ((values)*), 
                            null-type)) ]|
to-funcons:
  |[ allocate[: func(:Identifier:)(:Parameters:)(:TypeExpr:)(:Block:) :] ]| ->
  |[ bind (id[: (:Identifier:) :], 
             allocate-variable functions (tuples ((values)*), 
                            values)) ]|
to-funcons:
  |[ initialise[: func(:Identifier:)(:Parameters:){(:StatementSemic*:)} :] ]| ->
  |[ initialise-variable (bound id[: (:Identifier:) :], 
             function closure scope (collateral (match (given, 
                                                   tuple (bind-parameters[: (:Parameters:) :])), 
                                           allocate-statements[: (:StatementSemic*:) :]), 
                                   handle-return sequential (execute-statements[: (:StatementSemic*:) :]))) ]|
to-funcons:
  |[ initialise[: func(:Identifier:)(:Parameters:)(:TypeExpr:)(:Block:) :] ]| ->
  |[ initialise[: func(:Identifier:)(:Parameters:)(:Block:) :] ]|

