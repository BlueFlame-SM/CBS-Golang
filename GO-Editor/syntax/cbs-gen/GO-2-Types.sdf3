module GO-2-Types
            
imports 
  GO-3-Expressions
  GO-1-Lexemes
  GO-B-Funcons
  Funcons

// Language "Golang"
    
lexical syntax // Language
  
  // #2 Types
                
  
  
  // ## Integer Types
                   
  
  
  // ## Channel Types
                   
  
  
  // ## Function Types
                   
  
  LEX-COMMA = ","
  
  // ### Binding
                   
  
  
syntax // Language
  
  // #2 Types
                
  
  
  // ## Integer Types
                   
  
  
  // ## Channel Types
                   
  
  
  // ## Function Types
                   
  
  
  // ### Binding
                   
  
  
context-free syntax // Language
  
  // #2 Types
                
  
  
  // ## Integer Types
                   
  
  L-typeExpr.L-typeExpr--LPAREN-L-typeExpr-RPAREN =
    "(" L-typeExpr ")"
  L-typeExpr.L-typeExpr--L-channelType =
    L-channelType
  L-typeExpr.L-typeExpr--L-identifier =
    L-identifier
  
  
  // ## Channel Types
                   
  
  L-channelType.L-channelType--R-chan-L-typeExpr =
    "chan" L-typeExpr
  
  
  // ## Function Types
                   
  
  L-functionType.L-functionType--R-func-L-signature =
    "func" L-signature
  
  L-signature.L-signature--L-parameters-L-result-Q =
    L-parameters L-result?
  
  L-result.L-result--L-typeExpr =
    L-typeExpr
  
  L-parameters.L-parameters--LPAREN-C-L-parameterList-COMMA-Q-D-Q-RPAREN =
    "(" L-L-parameterList-COMMA-Q? ")"
  
  L-L-parameterList-COMMA-Q.L-L-parameterList-COMMA-Q--L-parameterList-COMMA-Q =
    L-parameterList LEX-COMMA?
  
  
  L-parameterList.L-parameterList--L-parameterDecl-C-COMMA-L-parameterList-D-Q =
    L-parameterDecl L-COMMA-L-parameterList?
  
  L-COMMA-L-parameterList.L-COMMA-L-parameterList--COMMA-L-parameterList =
    "," L-parameterList
  
  
  L-parameterDecl.L-parameterDecl--L-identifier-L-typeExpr =
    L-identifier L-typeExpr
  
  
  // ### Binding
                   
  
  
context-free syntax // Semantics
  
  // #2 Types
                
  
  
  // ## Integer Types
                   
  
  FCT.T-type =
    "type" "[:" L-typeExpr ":]"
  
  // ## Channel Types
                   
  
  
  // ## Function Types
                   
  
  
  // ### Binding
                   
  
  FCT.T-bind-parameters =
    "bind-parameters" "[:" L-parameters ":]"
  FCT.T-bind-parameterdecls =
    "bind-parameterdecls" "[:" L-parameterList ":]"
  FCT.T-bind-parameterdecl =
    "bind-parameterdecl" "[:" L-parameterDecl ":]"
  
context-free syntax // Desugaring
  
  // #2 Types
                
  
  
  // ## Integer Types
                   
  
  
  // ## Channel Types
                   
  
  
  // ## Function Types
                   
  
  
  // ### Binding
                   
  
  Term.ToTerm = "[:" L-parameters  ":]" ":" "parameters"
  
variables // Meta-variables
  
  // #2 Types
                
  
  
  // ## Integer Types
                   
  
  L-typeExpr = "(:TypeExpr" [1-9]? ":)" {prefer}
  L-typeExpr? = "(:TypeExpr" [1-9]? "?:)" {prefer}
  L-typeExpr* = "(:TypeExpr" [1-9]? "*:)" {prefer}
  L-typeExpr+ = "(:TypeExpr" [1-9]? "+:)" {prefer}
  
  // ## Channel Types
                   
  
  
  // ## Function Types
                   
  
  L-functionType = "(:FunctionType" [1-9]? ":)" {prefer}
  L-functionType? = "(:FunctionType" [1-9]? "?:)" {prefer}
  L-functionType* = "(:FunctionType" [1-9]? "*:)" {prefer}
  L-functionType+ = "(:FunctionType" [1-9]? "+:)" {prefer}
  L-signature = "(:Signature" [1-9]? ":)" {prefer}
  L-signature? = "(:Signature" [1-9]? "?:)" {prefer}
  L-signature* = "(:Signature" [1-9]? "*:)" {prefer}
  L-signature+ = "(:Signature" [1-9]? "+:)" {prefer}
  L-result = "(:Result" [1-9]? ":)" {prefer}
  L-result? = "(:Result" [1-9]? "?:)" {prefer}
  L-result* = "(:Result" [1-9]? "*:)" {prefer}
  L-result+ = "(:Result" [1-9]? "+:)" {prefer}
  L-parameters = "(:Parameters" [1-9]? ":)" {prefer}
  L-parameters? = "(:Parameters" [1-9]? "?:)" {prefer}
  L-parameters* = "(:Parameters" [1-9]? "*:)" {prefer}
  L-parameters+ = "(:Parameters" [1-9]? "+:)" {prefer}
  L-parameterList = "(:ParameterList" [1-9]? ":)" {prefer}
  L-parameterList? = "(:ParameterList" [1-9]? "?:)" {prefer}
  L-parameterList* = "(:ParameterList" [1-9]? "*:)" {prefer}
  L-parameterList+ = "(:ParameterList" [1-9]? "+:)" {prefer}
  L-parameterDecl = "(:ParameterDecl" [1-9]? ":)" {prefer}
  L-parameterDecl? = "(:ParameterDecl" [1-9]? "?:)" {prefer}
  L-parameterDecl* = "(:ParameterDecl" [1-9]? "*:)" {prefer}
  L-parameterDecl+ = "(:ParameterDecl" [1-9]? "+:)" {prefer}
  
  // ### Binding
                   
  
  
// SDF comments
  
  // #2 Types
                
  
  
  // ## Integer Types
                   
  
  
  // ## Channel Types
                   
  
  
  // ## Function Types
                   
  
  
  // ### Binding
                   
  
  
sorts // ASTs
  T-start
