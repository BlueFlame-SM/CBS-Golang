module GO-5-Declarations
            
imports 
  GO-2-Types
  GO-4-Statements
  GO-3-Expressions
  GO-1-Lexemes
  Funcons

// Language "Golang"
    
lexical syntax // Language
  
  // #5 Declarations
                
  
  
  // ## Constant declarations
                   
  
  
  // ## Variable declarations
                   
  
  
  // ## Function declarations
                   
  
  
syntax // Language
  
  // #5 Declarations
                
  
  
  // ## Constant declarations
                   
  
  
  // ## Variable declarations
                   
  
  
  // ## Function declarations
                   
  
  
context-free syntax // Language
  
  // #5 Declarations
                
  
  L-declaration.L-declaration--L-varDecl =
    L-varDecl
  
  L-topLevelDecl.L-topLevelDecl--L-declaration =
    L-declaration
  L-topLevelDecl.L-topLevelDecl--L-functionDecl =
    L-functionDecl
  
  
  // ## Constant declarations
                   
  
  
  // ## Variable declarations
                   
  
  L-varDecl.L-varDecl--R-var-L-varSpec =
    "var" L-varSpec
  
  L-varSpec.L-varSpec--L-identifier-EQUALS-L-expression =
    L-identifier "=" L-expression
  
  
  // ## Function declarations
                   
  
  L-functionDecl.L-functionDecl--R-func-L-identifier-L-parameters-L-typeExpr-Q-L-block =
    "func" L-identifier L-parameters L-typeExpr? L-block
  
  
context-free syntax // Semantics
  
  // #5 Declarations
                
  
  FCT.T-allocate =
    "allocate" "[:" L-topLevelDecl ":]"
  FCT.T-initialise =
    "initialise" "[:" L-topLevelDecl ":]"
  
  // ## Constant declarations
                   
  
  
  // ## Variable declarations
                   
  
  
  // ## Function declarations
                   
  
  
context-free syntax // Desugaring
  
  // #5 Declarations
                
  
  
  // ## Constant declarations
                   
  
  
  // ## Variable declarations
                   
  
  
  // ## Function declarations
                   
  
  
variables // Meta-variables
  
  // #5 Declarations
                
  
  L-declaration = "(:Declaration" [1-9]? ":)" {prefer}
  L-declaration? = "(:Declaration" [1-9]? "?:)" {prefer}
  L-declaration* = "(:Declaration" [1-9]? "*:)" {prefer}
  L-declaration+ = "(:Declaration" [1-9]? "+:)" {prefer}
  L-topLevelDecl = "(:TopLevelDecl" [1-9]? ":)" {prefer}
  L-topLevelDecl? = "(:TopLevelDecl" [1-9]? "?:)" {prefer}
  L-topLevelDecl* = "(:TopLevelDecl" [1-9]? "*:)" {prefer}
  L-topLevelDecl+ = "(:TopLevelDecl" [1-9]? "+:)" {prefer}
  
  // ## Constant declarations
                   
  
  
  // ## Variable declarations
                   
  
  L-varDecl = "(:VarDecl" [1-9]? ":)" {prefer}
  L-varDecl? = "(:VarDecl" [1-9]? "?:)" {prefer}
  L-varDecl* = "(:VarDecl" [1-9]? "*:)" {prefer}
  L-varDecl+ = "(:VarDecl" [1-9]? "+:)" {prefer}
  
  // ## Function declarations
                   
  
  L-functionDecl = "(:FunctionDecl" [1-9]? ":)" {prefer}
  L-functionDecl? = "(:FunctionDecl" [1-9]? "?:)" {prefer}
  L-functionDecl* = "(:FunctionDecl" [1-9]? "*:)" {prefer}
  L-functionDecl+ = "(:FunctionDecl" [1-9]? "+:)" {prefer}
  
// SDF comments
  
  // #5 Declarations
                
  
  
  // ## Constant declarations
                   
  
  
  // ## Variable declarations
                   
  
  
  // ## Function declarations
                   
  
  
sorts // ASTs
  T-start
