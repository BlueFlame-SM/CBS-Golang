module GO-4-Statements
            
imports 
  GO-1-Lexemes
  GO-3-Expressions
  Funcons

// Language "Golang"
    
lexical syntax // Language
  
  // #4 Statements
                
  
  
  // ## Empty statements
                   
  
  
  // ## Blocks
                   
  
  
  // ## Expression statements
                   
  
  
  // ## Assignment statements
                   
  
  
  // ## Declarations
                   
  
  
  // ### Constant declarations
                   
  
  
  // ### Variable declarations
                   
  
  
  // ### Short variable declarations
                   
  
  
  // ## If statements
                   
  
  
  // ## For statements
                   
  
  
  // ### For statements with for clause
                   
  
  
  // ## Temporary print statement
                   
  
  
syntax // Language
  
  // #4 Statements
                
  
  
  // ## Empty statements
                   
  
  
  // ## Blocks
                   
  
  
  // ## Expression statements
                   
  
  
  // ## Assignment statements
                   
  
  
  // ## Declarations
                   
  
  
  // ### Constant declarations
                   
  
  
  // ### Variable declarations
                   
  
  
  // ### Short variable declarations
                   
  
  
  // ## If statements
                   
  
  
  // ## For statements
                   
  
  
  // ### For statements with for clause
                   
  
  
  // ## Temporary print statement
                   
  
  
context-free syntax // Language
  
  // #4 Statements
                
  
  L-statement.L-statement--L-simpleStmt =
    L-simpleStmt
  L-statement.L-statement--L-declaration =
    L-declaration
  L-statement.L-statement--L-block =
    L-block
  L-statement.L-statement--L-printStmt =
    L-printStmt
  
  L-simpleStmt.L-simpleStmt--L-emptyStmt =
    L-emptyStmt
  
  
  // ## Empty statements
                   
  
  L-emptyStmt.L-emptyStmt--EMPTY =
    
  
  
  // ## Blocks
                   
  
  L-block.L-block--LBRACE-L-terminatedStmt-S-RBRACE =
    "{" L-terminatedStmt* "}"
  
  L-terminatedStmt.L-terminatedStmt--L-statement-SEMI =
    L-statement ";"
  
  
  // ## Expression statements
                   
  
  
  // ## Assignment statements
                   
  
  
  // ## Declarations
                   
  
  L-declaration.L-declaration--L-varDecl =
    L-varDecl
  
  L-topLevelDecl.L-topLevelDecl--L-declaration =
    L-declaration
  
  
  // ### Constant declarations
                   
  
  
  // ### Variable declarations
                   
  
  L-varDecl.L-varDecl--R-var-L-varSpec =
    "var" L-varSpec
  
  L-varSpec.L-varSpec--L-identifier-EQUALS-L-expression =
    L-identifier "=" L-expression
  
  
  // ### Short variable declarations
                   
  
  
  // ## If statements
                   
  
  
  // ## For statements
                   
  
  
  // ### For statements with for clause
                   
  
  
  // ## Temporary print statement
                   
  
  L-printStmt.L-printStmt--R-print-LPAREN-L-expression-RPAREN =
    "print" "(" L-expression ")"
  
  
context-free syntax // Semantics
  
  // #4 Statements
                
  
  FCT.T-execute =
    "execute" "[:" L-statement ":]"
  
  // ## Empty statements
                   
  
  
  // ## Blocks
                   
  
  FCT.T-execute-block =
    "execute-block" "[:" L-terminatedStmt* ":]"
  
  // ## Expression statements
                   
  
  
  // ## Assignment statements
                   
  
  
  // ## Declarations
                   
  
  
  // ### Constant declarations
                   
  
  
  // ### Variable declarations
                   
  
  FCT.T-declare-vars =
    "declare-vars" "[:" L-varDecl ":]"
  
  // ### Short variable declarations
                   
  
  
  // ## If statements
                   
  
  
  // ## For statements
                   
  
  
  // ### For statements with for clause
                   
  
  
  // ## Temporary print statement
                   
  
  
context-free syntax // Desugaring
  
  // #4 Statements
                
  
  
  // ## Empty statements
                   
  
  
  // ## Blocks
                   
  
  
  // ## Expression statements
                   
  
  
  // ## Assignment statements
                   
  
  
  // ## Declarations
                   
  
  
  // ### Constant declarations
                   
  
  
  // ### Variable declarations
                   
  
  
  // ### Short variable declarations
                   
  
  
  // ## If statements
                   
  
  
  // ## For statements
                   
  
  
  // ### For statements with for clause
                   
  
  
  // ## Temporary print statement
                   
  
  
variables // Meta-variables
  
  // #4 Statements
                
  
  L-statement = "(:Statement" [1-9]? ":)" {prefer}
  L-statement? = "(:Statement" [1-9]? "?:)" {prefer}
  L-statement* = "(:Statement" [1-9]? "*:)" {prefer}
  L-statement+ = "(:Statement" [1-9]? "+:)" {prefer}
  L-simpleStmt = "(:SimpleStmt" [1-9]? ":)" {prefer}
  L-simpleStmt? = "(:SimpleStmt" [1-9]? "?:)" {prefer}
  L-simpleStmt* = "(:SimpleStmt" [1-9]? "*:)" {prefer}
  L-simpleStmt+ = "(:SimpleStmt" [1-9]? "+:)" {prefer}
  
  // ## Empty statements
                   
  
  
  // ## Blocks
                   
  
  L-block = "(:Block" [1-9]? ":)" {prefer}
  L-block? = "(:Block" [1-9]? "?:)" {prefer}
  L-block* = "(:Block" [1-9]? "*:)" {prefer}
  L-block+ = "(:Block" [1-9]? "+:)" {prefer}
  L-terminatedStmt* = "..." [1-9]? {prefer}
  L-terminatedStmt = "(:TerminatedStmt" [1-9]? ":)" {prefer}
  L-terminatedStmt? = "(:TerminatedStmt" [1-9]? "?:)" {prefer}
  L-terminatedStmt* = "(:TerminatedStmt" [1-9]? "*:)" {prefer}
  L-terminatedStmt+ = "(:TerminatedStmt" [1-9]? "+:)" {prefer}
  
  // ## Expression statements
                   
  
  
  // ## Assignment statements
                   
  
  
  // ## Declarations
                   
  
  
  // ### Constant declarations
                   
  
  
  // ### Variable declarations
                   
  
  L-varDecl = "(:VarDecl" [1-9]? ":)" {prefer}
  L-varDecl? = "(:VarDecl" [1-9]? "?:)" {prefer}
  L-varDecl* = "(:VarDecl" [1-9]? "*:)" {prefer}
  L-varDecl+ = "(:VarDecl" [1-9]? "+:)" {prefer}
  
  // ### Short variable declarations
                   
  
  
  // ## If statements
                   
  
  
  // ## For statements
                   
  
  
  // ### For statements with for clause
                   
  
  
  // ## Temporary print statement
                   
  
  
// SDF comments
  
  // #4 Statements
                
  
  
  // ## Empty statements
                   
  
  
  // ## Blocks
                   
  
  
  // ## Expression statements
                   
  
  
  // ## Assignment statements
                   
  
  
  // ## Declarations
                   
  
  
  // ### Constant declarations
                   
  
  
  // ### Variable declarations
                   
  
  
  // ### Short variable declarations
                   
  
  
  // ## If statements
                   
  
  
  // ## For statements
                   
  
  
  // ### For statements with for clause
                   
  
  
  // ## Temporary print statement
                   
  
  
sorts // ASTs
  T-start
