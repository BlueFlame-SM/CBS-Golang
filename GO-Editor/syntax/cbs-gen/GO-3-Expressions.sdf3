module GO-3-Expressions
            
imports 
  GO-2-Types
  GO-1-Lexemes
  Funcons

// Language "Golang"
    
lexical syntax // Language
  
  // #3 Expressions
                
  
  
  // ## Operands
                   
  
  
  // ## Primary expressions
                   
  
  
  // ### Arguments
                   
  
  
  // ## Operators
                   
  
  
  // ### Binary operators
                   
  
  
  // #### Boolean expressions
                   
  
  
  // #### Comparison expressions
                   
  
  
  // #### Additive expressions
                   
  
  
  // #### Multiplicative expressions
                   
  
  
  // ### Unary expressions
                   
  
  
syntax // Language
  
  // #3 Expressions
                
  
  
  // ## Operands
                   
  
  
  // ## Primary expressions
                   
  
  
  // ### Arguments
                   
  
  
  // ## Operators
                   
  
  
  // ### Binary operators
                   
  
  
  // #### Boolean expressions
                   
  
  
  // #### Comparison expressions
                   
  
  
  // #### Additive expressions
                   
  
  
  // #### Multiplicative expressions
                   
  
  
  // ### Unary expressions
                   
  
  
context-free syntax // Language
  
  // #3 Expressions
                
  
  
  // ## Operands
                   
  
  L-operand.L-operand--L-int-lit =
    L-int-lit
  L-operand.L-operand--L-identifier =
    L-identifier
  L-operand.L-operand--LPAREN-L-expression-RPAREN =
    "(" L-expression ")"
  
  
  // ## Primary expressions
                   
  
  L-primaryExpr.L-primaryExpr--L-operand =
    L-operand
  L-primaryExpr.L-primaryExpr--L-primaryExpr-L-arguments =
    L-primaryExpr L-arguments
  
  
  // ### Arguments
                   
  
  L-arguments.L-arguments--LPAREN-RPAREN =
    "(" ")"
  L-arguments.L-arguments--LPAREN-L-typeExpr-L-commaExpression-S-RPAREN =
    "(" L-typeExpr L-commaExpression* ")"
  L-arguments.L-arguments--LPAREN-L-expression-L-commaExpression-S-RPAREN =
    "(" L-expression L-commaExpression* ")"
  L-arguments.L-arguments--LPAREN-L-typeExpr-L-commaExpression-S-COMMA-RPAREN =
    "(" L-typeExpr L-commaExpression* "," ")"
  L-arguments.L-arguments--LPAREN-L-expression-L-commaExpression-S-COMMA-RPAREN =
    "(" L-expression L-commaExpression* "," ")"
  
  L-commaExpression.L-commaExpression--COMMA-L-expression =
    "," L-expression
  
  
  // ## Operators
                   
  
  
  // ### Binary operators
                   
  
  L-expression.L-expression--L-unaryExpr =
    L-unaryExpr
  L-expression.L-expression--L-expression-BAR-BAR-L-expression =
    L-expression "||" L-expression
  L-expression.L-expression--L-expression-AMPERSAND-AMPERSAND-L-expression =
    L-expression "&&" L-expression
  L-expression.L-expression--L-expression-L-rel-op-L-expression =
    L-expression L-rel-op L-expression
  L-expression.L-expression--L-expression-L-add-op-L-expression =
    L-expression L-add-op L-expression
  L-expression.L-expression--L-expression-L-mul-op-L-expression =
    L-expression L-mul-op L-expression
  
  
  // #### Boolean expressions
                   
  
  
  // #### Comparison expressions
                   
  
  
  // #### Additive expressions
                   
  
  
  // #### Multiplicative expressions
                   
  
  
  // ### Unary expressions
                   
  
  L-unaryExpr.L-unaryExpr--L-primaryExpr =
    L-primaryExpr
  L-unaryExpr.L-unaryExpr--L-unary-op-L-unaryExpr =
    L-unary-op L-unaryExpr
  
  
context-free syntax // Semantics
  
  // #3 Expressions
                
  
  
  // ## Operands
                   
  
  
  // ## Primary expressions
                   
  
  
  // ### Arguments
                   
  
  FCT.T-tuple-arguments =
    "tuple-arguments" "[:" L-arguments ":]"
  FCT.T-evaluate-expressions =
    "evaluate-expressions" "[:" L-commaExpression* ":]"
  
  // ## Operators
                   
  
  
  // ### Binary operators
                   
  
  FCT.T-evaluate =
    "evaluate" "[:" L-expression ":]"
  
  // #### Boolean expressions
                   
  
  
  // #### Comparison expressions
                   
  
  
  // #### Additive expressions
                   
  
  
  // #### Multiplicative expressions
                   
  
  
  // ### Unary expressions
                   
  
  
context-free syntax // Desugaring
  
  // #3 Expressions
                
  
  
  // ## Operands
                   
  
  
  // ## Primary expressions
                   
  
  
  // ### Arguments
                   
  
  Term.ToTerm = "[:" L-arguments  ":]" ":" "arguments"
  Term.ToTerm = "[:" L-arguments  ":]" ":" "arguments"
  
  // ## Operators
                   
  
  
  // ### Binary operators
                   
  
  
  // #### Boolean expressions
                   
  
  
  // #### Comparison expressions
                   
  
  
  // #### Additive expressions
                   
  
  
  // #### Multiplicative expressions
                   
  
  
  // ### Unary expressions
                   
  
  
variables // Meta-variables
  
  // #3 Expressions
                
  
  
  // ## Operands
                   
  
  L-operand = "(:Operand" [1-9]? ":)" {prefer}
  L-operand? = "(:Operand" [1-9]? "?:)" {prefer}
  L-operand* = "(:Operand" [1-9]? "*:)" {prefer}
  L-operand+ = "(:Operand" [1-9]? "+:)" {prefer}
  
  // ## Primary expressions
                   
  
  L-primaryExpr = "(:PrimaryExpr" [1-9]? ":)" {prefer}
  L-primaryExpr? = "(:PrimaryExpr" [1-9]? "?:)" {prefer}
  L-primaryExpr* = "(:PrimaryExpr" [1-9]? "*:)" {prefer}
  L-primaryExpr+ = "(:PrimaryExpr" [1-9]? "+:)" {prefer}
  
  // ### Arguments
                   
  
  L-arguments = "(:Arguments" [1-9]? ":)" {prefer}
  L-arguments? = "(:Arguments" [1-9]? "?:)" {prefer}
  L-arguments* = "(:Arguments" [1-9]? "*:)" {prefer}
  L-arguments+ = "(:Arguments" [1-9]? "+:)" {prefer}
  L-commaExpression* = "..." [1-9]? {prefer}
  L-commaExpression* = "..." [1-9]? {prefer}
  L-commaExpression* = "..." [1-9]? {prefer}
  L-commaExpression* = "..." [1-9]? {prefer}
  L-commaExpression = "(:CommaExpression" [1-9]? ":)" {prefer}
  L-commaExpression? = "(:CommaExpression" [1-9]? "?:)" {prefer}
  L-commaExpression* = "(:CommaExpression" [1-9]? "*:)" {prefer}
  L-commaExpression+ = "(:CommaExpression" [1-9]? "+:)" {prefer}
  
  // ## Operators
                   
  
  
  // ### Binary operators
                   
  
  L-expression = "(:Expression" [1-9]? ":)" {prefer}
  L-expression? = "(:Expression" [1-9]? "?:)" {prefer}
  L-expression* = "(:Expression" [1-9]? "*:)" {prefer}
  L-expression+ = "(:Expression" [1-9]? "+:)" {prefer}
  
  // #### Boolean expressions
                   
  
  
  // #### Comparison expressions
                   
  
  
  // #### Additive expressions
                   
  
  
  // #### Multiplicative expressions
                   
  
  
  // ### Unary expressions
                   
  
  L-unaryExpr = "(:UnaryExpr" [1-9]? ":)" {prefer}
  L-unaryExpr? = "(:UnaryExpr" [1-9]? "?:)" {prefer}
  L-unaryExpr* = "(:UnaryExpr" [1-9]? "*:)" {prefer}
  L-unaryExpr+ = "(:UnaryExpr" [1-9]? "+:)" {prefer}
  
// SDF comments
  
  // #3 Expressions
                
  
  
  // ## Operands
                   
  
  
  // ## Primary expressions
                   
  
  
  // ### Arguments
                   
  
  
  // ## Operators
                   
  
  
  // ### Binary operators
                   
  
  
  // #### Boolean expressions
                   
  
  
  // #### Comparison expressions
                   
  
  
  // #### Additive expressions
                   
  
  
  // #### Multiplicative expressions
                   
  
  
  // ### Unary expressions
                   
  
  
sorts // ASTs
  T-start
